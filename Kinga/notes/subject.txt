Rozdział I Wstęp
Istnienie powłok (shelli) jest nierozerwalnie związane z samym istnieniem informatyki. Na początku wszyscy programiści zgodzili się, że komunikacja z komputerem za pomocą ułożonych przełączników 1/0 była wyjątkowo uciążliwa. Naturalnym było więc, że powstał pomysł stworzenia oprogramowania do komunikacji z komputerem za pomocą interaktywnych linii poleceń w języku w pewnym stopniu zbliżonym do języka ludzkiego. Dzięki Minishell będziesz mógł cofnąć się w czasie i doświadczyć problemów, z jakimi ludzie musieli się mierzyć, zanim pojawił się Windows.

Rozdział II Wspólne wskazówki
• Twój projekt musi być napisany w języku C.
• Kod musi być zgodny z Normą. Jeśli masz pliki/funkcje bonusowe, również podlegają one kontroli zgodności z Normą, a błąd spowoduje ocenę 0.
• Twoje funkcje nie powinny kończyć działania w sposób nieoczekiwany (segmentation fault, bus error, podwójne zwolnienie pamięci itp.), chyba że jest to nieokreślone zachowanie. W przeciwnym razie projekt uznany zostanie za niefunkcjonalny i oceniony na 0.
• Wszystka pamięć zaalokowana dynamicznie musi być poprawnie zwolniona w odpowiednim momencie. Nie dopuszcza się wycieków pamięci.
• Jeśli wymaga tego temat, musisz dostarczyć Makefile, który skompiluje pliki źródłowe do wymaganych plików wykonywalnych z flagami -Wall, -Wextra i -Werror, używając kompilatora cc, a Makefile nie może wykonywać ponownego linkowania (relink).
• Makefile musi zawierać co najmniej reguły: $(NAME), all, clean, fclean oraz re.
• Aby oddać bonusy do projektu, musisz dodać regułę bonus w Makefile, która dołącza wszystkie dodatkowe nagłówki, biblioteki lub funkcje zabronione w części głównej projektu. Bonusy muszą znajdować się w osobnych plikach _bonus.{c/h}, jeśli temat nie stanowi inaczej. Ocena części obowiązkowej i bonusowej odbywa się osobno.
• Jeśli projekt dopuszcza użycie libft, musisz skopiować jej źródła i Makefile do katalogu libft wraz z jej Makefile. Makefile projektu powinien najpierw skompilować tę bibliotekę korzystając z jej Makefile, a następnie skompilować projekt.
• Zachęcamy do tworzenia własnych programów testowych, chociaż nie trzeba ich dostarczać ani oceniać. Będą one bardzo pomocne przy testowaniu i podczas obrony projektu. Podczas obrony możesz użyć swoich testów lub testów kolegi, którego oceniasz.
• Prace musisz oddać w przypisanym repozytorium git. Tylko zawartość tego repozytorium będzie oceniana. Jeśli do oceny używany jest Deepthought, to ocena będzie automatyczna.
• Jeśli podczas oceny Deepthought wykryje błąd w dowolnym fragmencie pracy, ocena zostanie przerwana.

Rozdział III Część obowiązkowa

Nazwa programu: minishell
Oddawane pliki: Makefile, *.h, *.c
Reguły w Makefile: NAME, all, clean, fclean, re
Dozwolone funkcje zewnętrzne: readline, rl_clear_history, rl_on_new_line, rl_replace_line, rl_redisplay, add_history, printf, malloc, free, write, access, open, read, close, fork, wait, waitpid, wait3, wait4, signal, sigaction, sigemptyset, sigaddset, kill, exit, getcwd, chdir, stat, lstat, fstat, unlink, execve, dup, dup2, pipe, opendir, readdir, closedir, strerror, perror, isatty, ttyname, ttyslot, ioctl, getenv, tcsetattr, tcgetattr, tgetent, tgetflag, tgetnum, tgetstr, tgoto, tputs
Autoryzowana libft: Tak

Opis:
Napisz własną powłokę. Twój shell powinien:
• Wyświetlać prompt (zachętę) podczas oczekiwania na nowe polecenie.
• Mieć działającą historię poleceń.
• Wyszukiwać i uruchamiać właściwy plik wykonywalny (bazując na zmiennej PATH lub używając ścieżki względnej albo bezwzględnej).
• Unikać używania więcej niż jednej zmiennej globalnej do wskazywania odebranego sygnału. Pamiętaj, że taka zmienna nie powinna udostępniać żadnych innych danych poza numerem sygnału. Korzystanie z globalnych struktur typu "norm" jest zabronione.
• Nie interpretować niezamkniętych cudzysłowów ani znaków specjalnych nie wymienionych w temacie, takich jak \ (backslash) czy ; (średnik).
• Obsługiwać pojedyncze cudzysłowy (’), które mają blokować interpretację metaznaków wewnątrz cytowanego ciągu.
• Obsługiwać podwójne cudzysłowy ("), które blokują interpretację metaznaków, z wyjątkiem $ (znaku dolara).
• Implementować przekierowania:
◦ < — przekierowanie wejścia,
◦ > — przekierowanie wyjścia,
◦ << — tzw. "heredoc", który czyta dane aż do napotkania linii z zadanym separatorem (nie musi aktualizować historii),
◦ >> — przekierowanie wyjścia w trybie dopisywania (append).
• Implementować pipe (|), gdzie wyjście każdego polecenia jest połączone z wejściem następnego.
• Obsługiwać zmienne środowiskowe ($ wraz z ciągiem znaków), które rozwijają się do swoich wartości.
• Obsługiwać $? — rozwijanie do statusu wyjścia ostatnio wykonanego polecenia.
• Obsługiwać ctrl-C, ctrl-D i ctrl-\ tak jak w bashu:
◦ W trybie interaktywnym ctrl-C powoduje wyświetlenie nowego promptu w nowej linii.
◦ ctrl-D kończy działanie shel'a.
◦ ctrl-\ nie robi nic.
• Implementować następujące wbudowane polecenia (builtins):
◦ echo z opcją -n
◦ cd z podaniem ścieżki względnej lub bezwzględnej
◦ pwd bez opcji
◦ export bez opcji
◦ unset bez opcji
◦ env bez opcji i argumentów
◦ exit bez opcji

Uwagi:
Funkcja readline() może powodować wycieki pamięci — nie musisz ich naprawiać. Jednak pamiętaj, że Twój własny kod nie może mieć wycieków pamięci. Ogranicz się do wymagań tematu. Jeśli masz wątpliwości co do wymagań, użyj basha jako wzorca.