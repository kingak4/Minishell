readline(const char *prompt)
Tłumaczenie: Wczytuje jedną linię tekstu od użytkownika. Możesz podać tekst jako zachętę (prompt), np. readline("minishell$ ");.

Zwraca: Wskaźnik do tekstu (char *), który trzeba potem samodzielnie zwolnić free().

✅ Użyteczne w minishell do odczytu poleceń od użytkownika.

add_history(char *s)
Dodaje wpis do historii poleceń. Dzięki temu po naciśnięciu strzałki w górę użytkownik może przywołać poprzednie komendy.

rl_clear_history()
Czyści całą historię readline. Użyteczne przy kończeniu programu, żeby zwolnić pamięć.

rl_on_new_line()
Informuje readline, że przeszedłeś/-aś do nowej linii. Najczęściej używane przed ponownym wypisaniem prompta.

rl_redisplay()
Odświeża to, co aktualnie widać w terminalu (np. po wyczyszczeniu ekranu albo zmianie tekstu bufora).

rl_replace_line()
Dokumentacja nieznana / trudno dostępna. Raczej niepotrzebna do podstawowych zastosowań.

🔹 Środowisko i katalogi robocze
getcwd(char *buf, size_t size)
Tłumaczenie: Pobiera ścieżkę do aktualnego katalogu roboczego (np. /home/user/).

✅ Przydatne do wypisywania prompta z aktualną ścieżką.

chdir(const char *path)
Zmienia aktualny katalog roboczy (np. po komendzie cd).

Zwraca 0 przy sukcesie, -1 przy błędzie.

getenv(const char *name)
Pobiera wartość zmiennej środowiskowej (np. getenv("HOME") → /home/user).

✅ Potrzebne do obsługi ścieżek, np. w cd bez argumentów.

🔹 Pliki i katalogi
stat(), lstat(), fstat()
Pobierają informacje o pliku: rozmiar, typ, prawa dostępu itd.

Różnice:

stat(): zwykły plik

lstat(): działa również na symlinkach

fstat(): działa na deskryptorach plików (int fd)

opendir(const char *name)
Otwiera katalog i zwraca wskaźnik do struktury DIR.

readdir(DIR *dirp)
Odczytuje kolejną pozycję z katalogu (np. kolejny plik).

closedir(DIR *dirp)
Zamyka otwarty wcześniej katalog.

✅ Możesz ich użyć przy implementacji ls albo przy szukaniu plików wykonywalnych.

🔹 Błędy
strerror(int errnum)
Zwraca opis błędu odpowiadającego kodowi errnum (np. strerror(errno)).

perror(const char *s)
Wypisuje komunikat o błędzie poprzedzony Twoim tekstem.

✅ Świetne do debugowania: perror("open failed")

🔹 Terminale i urządzenia
isatty(int fd)
Sprawdza, czy deskryptor fd to terminal (np. isatty(0) sprawdza stdin).

ttyname(int fd)
Zwraca nazwę terminala przypisanego do deskryptora (np. /dev/pts/0).

ttyslot()
Funkcja starsza, zwraca numer terminala. Rzadko potrzebna, raczej legacy.

ioctl(int fd, unsigned long request, ...)
Ogólna funkcja do manipulowania urządzeniami. Bardziej zaawansowana.

🔹 Tryb terminala (np. surowy tryb do obsługi sygnałów, inputu)
tcgetattr(int fd, struct termios *termios_p)
Pobiera aktualne ustawienia terminala (np. echo, kanoniczność itp.)

tcsetattr(int fd, int optional_actions, const struct termios *termios_p)
Ustawia nowe parametry terminala.

✅ Używane np. do wyłączenia echo podczas wpisywania hasła lub do obsługi ctrl+C, ctrl+D.

🔹 Biblioteka termcap (obsługa terminali, formatowania)
tgetent, tgetflag, tgetnum, tgetstr, tgoto, tputs
Funkcje do obsługi parametrów terminala (kolorowanie, przesuwanie kursora itp.)

❗ Bardziej zaawansowane, ale mogą się przydać np. do czyszczenia ekranu, kolorów prompta.

✅ Podsumowanie – które funkcje najważniejsze do minishell:
Funkcja	Do czego użyjesz
readline()	Wczytywanie komendy użytkownika
add_history()	Zapamiętywanie poprzednich komend
getcwd()	Wypisywanie aktualnej ścieżki w promptcie
chdir()	Obsługa cd
getenv()	Pobieranie ścieżek jak HOME, PATH
stat()	Sprawdzanie, czy plik istnieje i jest wykonywalny
opendir() / readdir()	Szukanie plików w folderach (PATH)
perror()	Wypisywanie błędów
isatty()	Sprawdzenie, czy wejście to terminal
tcgetattr() / tcsetattr()	Zaawansowana obsługa terminala i sygnałów



🧠 PARSING (analiza wejścia użytkownika)
Tutaj chodzi o:

odczyt linii poleceń,

podział na komendy, argumenty,

obsługę zmiennych środowiskowych ($HOME, $? itd.),

sprawdzanie, czy są pipe'y, redirekcje itp.

🔹 Funkcje przydatne do PARSINGU:
Funkcja	Do czego się przyda
readline()	Wczytanie wejścia użytkownika jako string
add_history()	Zapisanie komendy do historii
rl_clear_history()	(opcjonalnie) czyszczenie historii
getenv()	Rozwijanie zmiennych środowiskowych (np. $PATH)
getcwd()	Rozwijanie pwd lub $PWD w zmiennych
isatty()	Sprawdzenie, czy to terminal (opcjonalnie w parsing shell-scripts)
strerror() / perror()	Diagnostyka błędów przy analizie (np. niezamknięty cudzysłów)

Dodatkowo, w parsingu piszesz własne funkcje:

lexer/tokenizer (rozdzielanie słów, operatorów |, <, >)

parser (łączenie tokenów w struktury typu AST lub lista komend)
